"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_CanvasContainer_js",{

/***/ "(pages-dir-browser)/./components/utils/canvasUtils.js":
/*!*****************************************!*\
  !*** ./components/utils/canvasUtils.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAnchorPoint: () => (/* binding */ createAnchorPoint),\n/* harmony export */   drawBezierCurve: () => (/* binding */ drawBezierCurve),\n/* harmony export */   drawBezierGuides: () => (/* binding */ drawBezierGuides),\n/* harmony export */   drawImageToCanvas: () => (/* binding */ drawImageToCanvas),\n/* harmony export */   getCoordinates: () => (/* binding */ getCoordinates),\n/* harmony export */   getPromptForStyle: () => (/* binding */ getPromptForStyle),\n/* harmony export */   initializeCanvas: () => (/* binding */ initializeCanvas),\n/* harmony export */   isNearHandle: () => (/* binding */ isNearHandle),\n/* harmony export */   updateHandle: () => (/* binding */ updateHandle)\n/* harmony export */ });\n// Get the correct coordinates based on canvas scaling\nconst getCoordinates = (e, canvas)=>{\n    var _e_nativeEvent_touches_, _e_nativeEvent_touches, _e_nativeEvent_touches_1, _e_nativeEvent_touches1;\n    const rect = canvas.getBoundingClientRect();\n    // Calculate the scaling factor between the internal canvas size and displayed size\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    // Apply the scaling to get accurate coordinates\n    return {\n        x: (e.nativeEvent.offsetX || ((_e_nativeEvent_touches = e.nativeEvent.touches) === null || _e_nativeEvent_touches === void 0 ? void 0 : (_e_nativeEvent_touches_ = _e_nativeEvent_touches[0]) === null || _e_nativeEvent_touches_ === void 0 ? void 0 : _e_nativeEvent_touches_.clientX) - rect.left) * scaleX,\n        y: (e.nativeEvent.offsetY || ((_e_nativeEvent_touches1 = e.nativeEvent.touches) === null || _e_nativeEvent_touches1 === void 0 ? void 0 : (_e_nativeEvent_touches_1 = _e_nativeEvent_touches1[0]) === null || _e_nativeEvent_touches_1 === void 0 ? void 0 : _e_nativeEvent_touches_1.clientY) - rect.top) * scaleY\n    };\n};\n// Initialize canvas with white background\nconst initializeCanvas = (canvas)=>{\n    const ctx = canvas.getContext(\"2d\");\n    // Fill canvas with white background\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n};\n// Draw the background image to the canvas\nconst drawImageToCanvas = (canvas, backgroundImage)=>{\n    if (!canvas || !backgroundImage) return;\n    const ctx = canvas.getContext(\"2d\");\n    // Fill with white background first\n    ctx.fillStyle = \"#FFFFFF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    // Draw the background image\n    ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n};\n// Draw bezier curve\nconst drawBezierCurve = (canvas, points)=>{\n    const ctx = canvas.getContext('2d');\n    if (!points || points.length < 2) {\n        console.error('Need at least 2 points to draw a path');\n        return;\n    }\n    ctx.beginPath();\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 3;\n    // Start at the first anchor point\n    ctx.moveTo(points[0].x, points[0].y);\n    // For each pair of anchor points (and their control points)\n    for(let i = 0; i < points.length - 1; i++){\n        const current = points[i];\n        const next = points[i + 1];\n        if (current.handleOut && next.handleIn) {\n            var _current_handleOut, _current_handleOut1, _next_handleIn, _next_handleIn1;\n            // If both points have handles, draw a cubic bezier\n            ctx.bezierCurveTo(current.x + (((_current_handleOut = current.handleOut) === null || _current_handleOut === void 0 ? void 0 : _current_handleOut.x) || 0), current.y + (((_current_handleOut1 = current.handleOut) === null || _current_handleOut1 === void 0 ? void 0 : _current_handleOut1.y) || 0), next.x + (((_next_handleIn = next.handleIn) === null || _next_handleIn === void 0 ? void 0 : _next_handleIn.x) || 0), next.y + (((_next_handleIn1 = next.handleIn) === null || _next_handleIn1 === void 0 ? void 0 : _next_handleIn1.y) || 0), next.x, next.y);\n        } else {\n            // If no handles, draw a straight line\n            ctx.lineTo(next.x, next.y);\n        }\n    }\n    ctx.stroke();\n};\n// Draw bezier guides (control points and lines)\nconst drawBezierGuides = (ctx, points)=>{\n    if (!points || points.length === 0) return;\n    // Draw the path itself first (as a light preview)\n    ctx.save();\n    ctx.globalAlpha = 0.3;\n    ctx.strokeStyle = '#888888';\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    // For each pair of anchor points (and their control points)\n    for(let i = 0; i < points.length - 1; i++){\n        const current = points[i];\n        const next = points[i + 1];\n        if (current.handleOut && next.handleIn) {\n            var _current_handleOut, _current_handleOut1, _next_handleIn, _next_handleIn1;\n            // If both points have handles, draw a cubic bezier\n            ctx.bezierCurveTo(current.x + (((_current_handleOut = current.handleOut) === null || _current_handleOut === void 0 ? void 0 : _current_handleOut.x) || 0), current.y + (((_current_handleOut1 = current.handleOut) === null || _current_handleOut1 === void 0 ? void 0 : _current_handleOut1.y) || 0), next.x + (((_next_handleIn = next.handleIn) === null || _next_handleIn === void 0 ? void 0 : _next_handleIn.x) || 0), next.y + (((_next_handleIn1 = next.handleIn) === null || _next_handleIn1 === void 0 ? void 0 : _next_handleIn1.y) || 0), next.x, next.y);\n        } else {\n            // If no handles, draw a straight line\n            ctx.lineTo(next.x, next.y);\n        }\n    }\n    ctx.stroke();\n    ctx.restore();\n    // Draw guide lines between anchor points and their handles\n    ctx.strokeStyle = 'rgba(100, 100, 255, 0.5)';\n    ctx.lineWidth = 1;\n    points.forEach((point)=>{\n        // Draw line from anchor to in-handle if it exists\n        if (point.handleIn) {\n            ctx.beginPath();\n            ctx.moveTo(point.x, point.y);\n            ctx.lineTo(point.x + point.handleIn.x, point.y + point.handleIn.y);\n            ctx.stroke();\n        }\n        // Draw line from anchor to out-handle if it exists\n        if (point.handleOut) {\n            ctx.beginPath();\n            ctx.moveTo(point.x, point.y);\n            ctx.lineTo(point.x + point.handleOut.x, point.y + point.handleOut.y);\n            ctx.stroke();\n        }\n    });\n    // Draw anchor points (main points of the path)\n    points.forEach((point, index)=>{\n        // Draw the main anchor point\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n        ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.stroke();\n        // Draw the handle points if they exist\n        if (point.handleIn) {\n            ctx.fillStyle = 'rgba(100, 100, 255, 0.8)';\n            ctx.beginPath();\n            ctx.arc(point.x + point.handleIn.x, point.y + point.handleIn.y, 4, 0, Math.PI * 2);\n            ctx.fill();\n        }\n        if (point.handleOut) {\n            ctx.fillStyle = 'rgba(100, 100, 255, 0.8)';\n            ctx.beginPath();\n            ctx.arc(point.x + point.handleOut.x, point.y + point.handleOut.y, 4, 0, Math.PI * 2);\n            ctx.fill();\n        }\n    });\n};\n// Helper to create a new anchor point with handles\nconst createAnchorPoint = function(x, y) {\n    let prevPoint = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    // By default, create a point with no handles\n    const point = {\n        x,\n        y,\n        handleIn: null,\n        handleOut: null\n    };\n    // If there's a previous point, automatically add symmetric handles\n    if (prevPoint) {\n        // Calculate the default handle length (as a percentage of distance to previous point)\n        const dx = x - prevPoint.x;\n        const dy = y - prevPoint.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const handleLength = distance * 0.3; // 30% of distance between points\n        // Create handles perpendicular to the line between points\n        // For a smooth curve, make the previous point's out handle opposite to this point's in handle\n        const angle = Math.atan2(dy, dx);\n        // Add an out handle to the previous point (if it doesn't already have one)\n        if (!prevPoint.handleOut) {\n            prevPoint.handleOut = {\n                x: Math.cos(angle) * -handleLength,\n                y: Math.sin(angle) * -handleLength\n            };\n        }\n        // Add an in handle to the current point\n        point.handleIn = {\n            x: Math.cos(angle) * -handleLength,\n            y: Math.sin(angle) * -handleLength\n        };\n    }\n    return point;\n};\n// Helper to check if a point is near a handle\nconst isNearHandle = function(point, handleType, x, y) {\n    let radius = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 10;\n    if (!point || !point[handleType]) return false;\n    const handleX = point.x + point[handleType].x;\n    const handleY = point.y + point[handleType].y;\n    const dx = handleX - x;\n    const dy = handleY - y;\n    return dx * dx + dy * dy <= radius * radius;\n};\n// Helper to update a handle position\nconst updateHandle = function(point, handleType, dx, dy) {\n    let symmetric = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n    if (!point || !point[handleType]) return;\n    // Update the target handle\n    point[handleType].x += dx;\n    point[handleType].y += dy;\n    // If symmetric and the other handle exists, update it to be symmetrical\n    if (symmetric) {\n        const otherType = handleType === 'handleIn' ? 'handleOut' : 'handleIn';\n        if (point[otherType]) {\n            point[otherType].x = -point[handleType].x;\n            point[otherType].y = -point[handleType].y;\n        }\n    }\n};\n// Get prompt based on style mode\nconst getPromptForStyle = (styleMode)=>{\n    switch(styleMode){\n        case 'material':\n            return \"Recreate this doodle as a physical chrome sculpture made of a chromium metal tubes or pipes in a professional studio setting. If it is typography, render it accordingly, but always always have a black background and studio lighting. Render it in Cinema 4D with Octane, using studio lighting against a pure black background. Make it look like a high-end product rendering of a sculptural piece. Flat Black background always\";\n        case 'honey':\n            return \"Transform this sketch into a honey-like substance. Render it as if made entirely of translucent, golden honey with characteristic viscous drips and flows. Add realistic liquid properties including surface tension, reflections, and light refraction. Use studio lighting to highlight the amber tones and glossy surface against a black background. Make it appear as if captured in a high-end commercial photography setup.\";\n        case 'softbody':\n            return \"Convert this drawing into a soft body physics simulation. Render it as if made of a soft, jelly-like material that responds to gravity and motion. Add realistic deformation, bounce, and squash effects typical of soft body dynamics. Use dramatic lighting against a black background to emphasize the material's translucency and surface properties. Make it look like a high-end 3D animation frame.\";\n        default:\n            return \"Recreate this doodle as a physical chrome sculpture in a professional studio setting.\";\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/utils/canvasUtils.js\n"));

/***/ })

});